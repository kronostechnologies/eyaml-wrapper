#!/bin/bash

# GIVEN private/public PKCS7 keys and a folder containing .eyml files
# WHEN called from the command line with valid key and configuration folder
# THEN deposit unencrypted .yml files next to .eyml files

# parse args
usage () {
  cat 1>&2 <<EOF
eyamldecrypt -k|--key <private_key_file> -p|--pub <pkcs_public_key_file> -d|--directory <dir-with-eyml-files> -q|--quiet -qq|--silent

# Environment variables has priority over options
  EYAMLDECRYPT_PRIVATE_KEY      PKCS7 private key            export EYAMLDECRYPT_PRIVATE_KEY=\$(cat ./keys/private_key.pkcs7.pem)
  EYAMLDECRYPT_PUBLIC_KEY       PKCS7 public key             export EYAMLDECRYPT_PUBLIC_KEY=\$(cat ./keys/public_key.pkcs7.pem)
  EYAMLDECRYPT_CONF_DIR         Directory of eyml files      export EYAMLDECRYPT_CONF_DIR=./application/configs/

EOF
  exit 1
}

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
      -k|--key)
        privateKeyFile="$2"
        shift
      ;;
      -p|--pub)
        publicKeyFile="$2"
        shift
      ;;
      -d|--directory)
        configDir="$2"
        shift
      ;;
      -q|--quiet)
        quiet=true
      ;;
      -qq|--silent)
        quiet=true
        silent=true
      ;;
      -h|--help)
        usage
      ;;
      *)
      ;;
  esac
  shift
done

function warning {
  [ "${silent}" != 'true' ] && printf 'eyamldecrypt: %s\n' "$@"
}

function notice {
  [ "${quiet}" != 'true' ] && printf 'eyamldecrypt: %s\n' "$@"
}

# make sure eyaml exists
command -v eyaml >/dev/null 2>&1 || { echo 1>&2 "Command 'eyaml' does not exist and is required to run this script. Aborting."; exit 1; }

# check locale and use UTF-8 if possible
if [[ ! $LANG =~ (UTF-8|utf8|UTF8|utf-8) ]]; then
  UTF8_LOCALE=$(locale -a | grep -i UTF | tail -n1)
  if [[ -z $UTF8_LOCALE ]]; then
    notice "there are no UTF-8 locale on this system. Using default locale '${LANG}'"
    notice "files containning utf-8 character won't be decrypted and will fail with '!!! invalid byte sequence in US-ASCII' error"
  else
    export LANG=$UTF8_LOCALE
  fi
fi

# load env
if [ ! -z "${EYAMLDECRYPT_PRIVATE_KEY}" ]
then
  notice "environment variable 'EYAMLDECRYPT_PRIVATE_KEY' is set and will be used"
  privateKeyTmpFile=$(mktemp)
  echo -n "${EYAMLDECRYPT_PRIVATE_KEY}" > $privateKeyTmpFile
  privateKeyFile=$privateKeyTmpFile
fi

if [ ! -z "${EYAMLDECRYPT_PUBLIC_KEY}" ]
then
  notice "environment variable 'EYAMLDECRYPT_PUBLIC_KEY' is set and will be used"
  publicKeyTmpFile=$(mktemp)
  echo -n "${EYAMLDECRYPT_PUBLIC_KEY}" > $publicKeyTmpFile
  publicKeyFile=$publicKeyTmpFile
fi

if [ ! -z "${EYAMLDECRYPT_CONF_DIR}" ]
then
  notice "environment variable 'EYAMLDECRYPT_CONF_DIR' is set and will be used"
  configDir="${EYAMLDECRYPT_CONF_DIR}"
fi


# validate inputs
if [ -z "${privateKeyFile}" ] || [ ! -f "${privateKeyFile}" ]
then
  warning "invalid parameter: private key file '$privateKeyFile'"
fi

if [ -z "${publicKeyFile}" ] || [ ! -f "${publicKeyFile}" ]
then
  warning "invalid parameter: public key file '$publicKeyFile'"
fi

if [ -z "${configDir}" ] || [ ! -d "${configDir}" ]
then
  warning "invalid parameter: configuration directory '$configDir'"
fi


# decrypt eyml files
if [ -f "${privateKeyFile}" ] && [ -f "${publicKeyFile}" ] && [ -d "${configDir}" ]
then
  notice "decrypting all .eyml file in '$configDir' (recursive)"
  shopt -s globstar
  for eymlFile in $configDir/**/*.eyml
  do
    notice "decrypting '${eymlFile}'"
    ymlFile="${eymlFile%.eyml}.yml"
    eyaml decrypt \
      --pkcs7-private-key=$privateKeyFile \
      --pkcs7-public-key=$publicKeyFile \
      --file $eymlFile > $ymlFile
  done
else
  notice "no eyml files decrypted"
fi

# cleanup tmp files
[ -f "${privateKeyTmpFile}" ] && rm $privateKeyTmpFile
[ -f "${publicKeyTmpFile}" ] && rm $publicKeyTmpFile
